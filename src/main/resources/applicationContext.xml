<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 开启注解扫描 -->
    <context:component-scan base-package="com.hxj">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 引入db.properties -->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>

    <!-- 创建数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driver}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${user}"/>
        <property name="password" value="${password}"/>
        <!--
        <property name="initialPoolSize" value="${initialPoolSize}"/>
        <property name="maxPoolSize" value="${maxPoolSize}"/>
        <property name="maxIdleTime" value="${maxIdleTime}"/>-->
        <!--连接池中保留的最小连接数。-->
        <!--<property name="minPoolSize" value="5"/>
        &lt;!&ndash;连接池中保留的最大连接数。Default: 15 &ndash;&gt;
        <property name="maxPoolSize" value="500"/>
        &lt;!&ndash;初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 &ndash;&gt;
        <property name="initialPoolSize" value="10"/>
        &lt;!&ndash;最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 &ndash;&gt;
        <property name="maxIdleTime" value="60"/>
        &lt;!&ndash;当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 &ndash;&gt;
        <property name="acquireIncrement" value="5"/>
        &lt;!&ndash;每60秒检查所有连接池中的空闲连接。Default: 0 &ndash;&gt;
        <property name="idleConnectionTestPeriod" value="60"/>
        &lt;!&ndash;定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 &ndash;&gt;
        <property name="acquireRetryAttempts" value="30"/>
        &lt;!&ndash;获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
       保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
       获取连接失败后该数据源将申明已断开并永久关闭。Default: false&ndash;&gt;
        <property name="breakAfterAcquireFailure" value="false"/>
        &lt;!&ndash;因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
      时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
      等方法来提升连接测试的性能。Default: false &ndash;&gt;
        <property name="testConnectionOnCheckout" value="false"/>
        &lt;!&ndash;JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
               属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
               如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0&ndash;&gt;
        <property name="maxStatements" value="0"/>
        &lt;!&ndash;连接池用完时客户调用getConnection()后等待获取连接的时间，单位：毫秒。超时后会抛出&ndash;&gt;
        &lt;!&ndash;SQLEXCEPTION，如果设置0，则无限等待。Default:0&ndash;&gt;
        <property name="checkoutTimeout" value="100"/>-->
    </bean>

    <!-- 将SqlSessionFactory的创建交给Spring来做，这是Spring和Mybatis整合的一个核心 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <property name="logImpl" value="org.apache.ibatis.logging.log4j.Log4jImpl"/>
                <property name="lazyLoadingEnabled" value="true"/>
            </bean>
        </property>
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:com/hxj/mapper/*Mapper.xml"/>
        <property name="typeAliasesPackage" value="com.hxj.domain"/>
    </bean>

    <!-- Mybatis可以为Mapper接口创建代理  现在这部分功能交给Spring来做-->
    <bean id="mapperScannerConfigurer"  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.hxj.mapper"/>
    </bean>


    <!-- 事务管理 -->
    <!-- 创建一个事务管理的切面类对象 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 开启事务注解 -->
    <tx:annotation-driven/>

    <!--
      如果通过配置方式来处理事务：
        事务增强   tx:advice
        切面配置   aop:config   切入点表达式   指定切面类  如何管理
     -->

</beans>